{"version":3,"file":"static/js/544.f2ed472c.chunk.js","mappings":"oSACMA,EAAU,mCACVC,EAAW,gCAEJC,EAAW,mCAAG,+GAEaC,IAAAA,IAAA,UAAaF,EAAb,sCAAmDD,IAFhE,uBAELI,EAFK,EAEZC,KAAOD,QAFK,kBAGZA,GAHY,gCAKnBE,QAAQC,IAAR,MALmB,yDAAH,qDASXC,EAAc,mCAAG,WAAMC,GAAN,kGAEUN,IAAAA,IAAA,UAAaF,EAAb,iBAA8BQ,EAA9B,oBAAiDT,IAF3D,uBAERI,EAFQ,EAEfC,KAAOD,QAFQ,kBAGfA,GAHe,gCAKtBE,QAAQC,IAAR,MALsB,yDAAH,sDASdG,EAAa,mCAAG,WAAOD,EAASE,GAAhB,kGAEWR,IAAAA,IAAA,UAAaF,EAAb,iBAA8BQ,EAA9B,YAAyCE,EAAzC,oBAA0DX,IAFrE,uBAEPI,EAFO,EAEdC,KAAOD,QAFO,kBAGdA,GAHc,gCAKrBE,QAAQC,IAAR,MALqB,yDAAH,wDASbK,EAAkB,mCAAG,WAAMC,GAAN,kGAEMV,IAAAA,IAAA,UAAaF,EAAb,gCAA6CD,EAA7C,kBAA8Da,EAA9D,gCAFN,uBAEZT,EAFY,EAEnBC,KAAOD,QAFY,kBAGnBA,GAHmB,gCAK1BE,QAAQC,IAAR,MAL0B,yDAAH,qD,oJC9BlBO,EAAa,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACzB,OACI,+BACgB,OAAXA,QAAW,IAAXA,OAAA,EAAAA,EAAaC,QAAS,GAEf,wBACKD,EAAYE,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACb,2BACI,0CAAgBD,MAChB,uBAAIC,MAFCF,EADI,OASrB,sEAKnB,ECGD,EAnBgB,WACZ,OAAsCG,EAAAA,EAAAA,UAAS,IAA/C,eAAON,EAAP,KAAoBO,EAApB,KACQb,GAAYc,EAAAA,EAAAA,MAAZd,QAUR,OARAe,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAc,mCAAG,qGACGf,EAAAA,EAAAA,IAAcD,EAAS,WAD1B,OACbiB,EADa,OAEnBJ,EAAeI,GAFI,2CAAH,qDAIpBD,GACH,GAAE,CAAChB,KAGA,0BACI,SAACK,EAAD,CAAYC,YAAaA,EAAYX,WAGhD,C","sources":["api/fetchMovies.js","components/ReviewList/ReviewList.jsx","pages/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = 'caf4817d038ad000058dc20ea7aa15f5';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport const fetchMovies = async () => {\n    try {\n        const {data: {results}} = await axios.get(`${BASE_URL}trending/movie/day?api_key=${API_KEY}`);\n        return results;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const fetchMovieById = async movieId => {\n    try {\n        const {data: {results}} = await axios.get(`${BASE_URL}movie/${movieId}?api_key=${API_KEY}`);\n        return results;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const fetchMovieAdd = async (movieId, param) => {\n    try {\n        const {data: {results}} = await axios.get(`${BASE_URL}movie/${movieId}/${param}?api_key=${API_KEY}`);\n        return results;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const fetchMoviesByQuery = async query => {\n    try {\n        const {data: {results}} = await axios.get(`${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=1&include_adult=false`);\n        return results;\n    } catch (error) {\n        console.log(error);\n    }\n};\n","\nexport const ReviewList = ({ movieReview }) => {\n    return (\n        <>\n            {movieReview?.length > 0\n                ? (\n                    <ul>\n                        {movieReview.map(({ id, author, content }) => (\n                            <li key={id}>\n                                <h4>{`Author: ${author}`}</h4>\n                                <p>{content}</p>\n                            </li>\n                        ))}\n                    </ul>\n                )\n                : (\n                    <p> We don't have any reviews for this movie</p>\n                )\n            }\n        </>\n    )\n}","import { useState, useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport { fetchMovieAdd } from \"api/fetchMovies\";\nimport { ReviewList } from '../../components/ReviewList/ReviewList';\n\nconst Reviews = () => {\n    const [movieReview, setMovieReview] = useState([])\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        const getMovieReview = async () => {\n            const reviews = await fetchMovieAdd(movieId, 'reviews');\n            setMovieReview(reviews);\n        }\n        getMovieReview();\n    }, [movieId]);\n\n    return (\n        <div>\n            <ReviewList movieReview={movieReview.results}/>\n        </div>\n    );\n};\n\nexport default Reviews;"],"names":["API_KEY","BASE_URL","fetchMovies","axios","results","data","console","log","fetchMovieById","movieId","fetchMovieAdd","param","fetchMoviesByQuery","query","ReviewList","movieReview","length","map","id","author","content","useState","setMovieReview","useParams","useEffect","getMovieReview","reviews"],"sourceRoot":""}