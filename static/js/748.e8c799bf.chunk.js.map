{"version":3,"file":"static/js/748.e8c799bf.chunk.js","mappings":"oSACMA,EAAU,mCACVC,EAAW,gCAEJC,EAAW,mCAAG,+GAEIC,IAAAA,IAAA,UAAaF,EAAb,sCAAmDD,IAFvD,cAEbI,EAFa,OAGbC,EAAeD,EAASE,KAAKC,QAHhB,kBAIZF,GAJY,gCAMnBG,QAAQC,IAAR,MANmB,yDAAH,qDAUXC,EAAc,mCAAG,WAAMC,GAAN,kGAECR,IAAAA,IAAA,UAAaF,EAAb,iBAA8BU,EAA9B,oBAAiDX,IAFlD,cAEhBI,EAFgB,OAGhBC,EAAeD,EAASE,KAHR,kBAIfD,GAJe,gCAMtBG,QAAQC,IAAR,MANsB,yDAAH,sDAUdG,EAAa,mCAAG,WAAOD,EAASE,GAAhB,kGAEEV,IAAAA,IAAA,UAAaF,EAAb,iBAA8BU,EAA9B,YAAyCE,EAAzC,oBAA0Db,IAF5D,cAEfI,EAFe,OAGfC,EAAeD,EAASE,KAHT,kBAIdD,GAJc,gCAMrBG,QAAQC,IAAR,MANqB,yDAAH,wDAUbK,EAAkB,mCAAG,WAAMC,GAAN,kGAEHZ,IAAAA,IAAA,UAAaF,EAAb,gCAA6CD,EAA7C,kBAA8De,EAA9D,gCAFG,cAEpBX,EAFoB,OAGpBC,EAAeD,EAASE,KAAKC,QAHT,kBAInBF,GAJmB,gCAM1BG,QAAQC,IAAR,MAN0B,yDAAH,qD,4KChClBO,EAAQC,EAAAA,GAAAA,MAAH,kUAgBLC,EAAYD,EAAAA,GAAAA,OAAH,mf,SCsCtB,EAlDmB,WACf,IAAME,GAAWC,EAAAA,EAAAA,MACjB,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAoDL,EAAAA,EAAAA,UAAS,IAA7D,eAAOM,EAAP,KAA2BC,EAA3B,KAyBA,OAbAC,EAAAA,EAAAA,YAAU,WACN,GAAqB,KAAjBJ,EAAJ,CAEA,IAAMK,EAAe,mCAAG,2FACdC,EAAcN,EAAaO,IAAI,UADjB,iCAGWlB,EAAAA,EAAAA,IAAmBiB,GAH9B,OAGVE,EAHU,OAIhBL,EAAsBK,GAJN,2CAAH,qDAOrBH,GAT+B,CAUlC,GAAE,CAACL,KAGA,4BACI,kBAAMS,SArBW,SAAAC,GACrBA,EAAEC,iBACYV,EAAdJ,EAA8B,CAAEP,MAAOO,GAAiC,IACxEC,EAAe,GAClB,EAiBO,WACI,SAACP,EAAD,CAAOqB,KAAK,OAAOC,MAAOhB,EAAaiB,SA1B1B,SAAAJ,GACrBZ,EAAeY,EAAEK,OAAOF,MAC3B,KAyBW,SAACpB,EAAD,yBAEJ,0BACKS,EAAmBc,KAAI,SAAAC,GAAK,OACzB,yBACI,yBACI,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAM3B,GAAhD,UACI,wBAAKuB,EAAMK,aAHdL,EAAME,GADU,QAY5C,C","sources":["api/fetchMovies.js","pages/MoviesPage/MoviesPage.styled.js","pages/MoviesPage/MoviesPage.jsx"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = 'caf4817d038ad000058dc20ea7aa15f5';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport const fetchMovies = async () => {\n    try {\n        const response = await axios.get(`${BASE_URL}trending/movie/day?api_key=${API_KEY}`);\n        const responseData = response.data.results;\n        return responseData;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const fetchMovieById = async movieId => {\n    try {\n        const response = await axios.get(`${BASE_URL}movie/${movieId}?api_key=${API_KEY}`);\n        const responseData = response.data;\n        return responseData;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const fetchMovieAdd = async (movieId, param) => {\n    try {\n        const response = await axios.get(`${BASE_URL}movie/${movieId}/${param}?api_key=${API_KEY}`);\n        const responseData = response.data;\n        return responseData;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const fetchMoviesByQuery = async query => {\n    try {\n        const response = await axios.get(`${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=1&include_adult=false`);\n        const responseData = response.data.results;\n        return responseData;\n    } catch (error) {\n        console.log(error);\n    }\n};\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  display: inline-block;\n  width: 280px;\n  height: 30px;\n  margin-top: 5px;\n  border: 2px solid rgba(188, 184, 184, 0.989);\n  padding-left: 20px;\n  outline: none;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:focus,\n  &:hover {\n    border: 2px solid rgb(75, 62, 142);\n  }\n`;\n\nexport const SearchBtn = styled.button`\n  display: inline-block;\n  width: 60px;\n  height: 36px;\n  color: black;\n  border: 2px solid rgba(188, 184, 184, 0.989);\n  background-color: transparent;\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n}\n\n  &:hover,\n  &:focus {\n    opacity: 1;\n    color: white;\n    background-color: rgb(75, 62, 142);\n  }\n`;","import { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchMoviesByQuery } from 'api/fetchMovies';\nimport { Input, SearchBtn } from './MoviesPage.styled';\n\nconst MoviesPage = () => {\n    const location = useLocation();\n    const [querySearch, setQuerySearch] = useState('');\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [searchMovieByQuery, setSearchMovieByQuery] = useState([]);\n\n    const querySearchValue = e => {\n        setQuerySearch(e.target.value);\n    };\n\n    const submitQueryValue = e => {\n        e.preventDefault();\n        querySearch ? setSearchParams({ query: querySearch }) : setSearchParams('');\n        setQuerySearch('');\n    };\n\n    useEffect(() => {\n        if (searchParams === '') return;\n\n        const getMovieByQuery = async () => {\n            const searchMovie = searchParams.get('query');\n            if (searchMovie) {\n                const movieByQuery = await fetchMoviesByQuery(searchMovie);\n                setSearchMovieByQuery(movieByQuery);\n            }\n        };\n        getMovieByQuery();\n    }, [searchParams]);\n\n    return (\n        <div>\n            <form onSubmit={submitQueryValue}>\n                <Input type=\"text\" value={querySearch} onChange={querySearchValue} />\n                <SearchBtn>Search</SearchBtn>\n            </form>\n            <main>\n                {searchMovieByQuery.map(movie => (\n                    <ul key={movie.id}>\n                        <li>\n                            <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                                <h4>{movie.title}</h4>\n                            </Link>\n                        </li>\n                    </ul>\n                ))}\n            </main>\n        </div>\n    );\n};\n\nexport default MoviesPage;"],"names":["API_KEY","BASE_URL","fetchMovies","axios","response","responseData","data","results","console","log","fetchMovieById","movieId","fetchMovieAdd","param","fetchMoviesByQuery","query","Input","styled","SearchBtn","location","useLocation","useState","querySearch","setQuerySearch","useSearchParams","searchParams","setSearchParams","searchMovieByQuery","setSearchMovieByQuery","useEffect","getMovieByQuery","searchMovie","get","movieByQuery","onSubmit","e","preventDefault","type","value","onChange","target","map","movie","to","id","state","from","title"],"sourceRoot":""}